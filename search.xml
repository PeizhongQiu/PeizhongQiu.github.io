<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WIN10配置hexo</title>
    <url>/p/c7035f77.html</url>
    <content><![CDATA[<p>具体可以参考官方中文文档<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p>
<span id="more"></span>


<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p><strong>方法一</strong>：官方的安装地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br><strong>方法二</strong>：通过 nvs（推荐）或者nvm 安装。nvs安装地址：<a href="https://github.com/jasongin/nvs/">https://github.com/jasongin/nvs/</a></p>
<h1 id="安装git（略）"><a href="#安装git（略）" class="headerlink" title="安装git（略）"></a>安装git（略）</h1><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g #完整命令为hexo generate，用于生成静态文件</span><br><span class="line">$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览</span><br><span class="line">$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</span><br><span class="line">$ hexo n #完整命令为hexo new，用于新建一篇文章</span><br></pre></td></tr></table></figure>
<h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p><strong>1、</strong>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>接下来说明部分文件的作用。<br><strong>_config.yml</strong><br>网站的 <em>配置</em>  信息，您可以在此配置大部分的参数。</p>
<p><strong>package.json</strong><br><em>应用程序</em> 的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p>
<p><strong>scaffolds</strong><br><em>模版</em> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<p><strong>source</strong><br><em>资源</em> 文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>
<p><strong>themes</strong><br><em>主题</em> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<p><strong>2、</strong>将hexo和github进行关联<br>首先在github上创建一个仓库，仓库名为***.github.io，接着编辑**_config.yml**文件，在_config.yml最下方，添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:***&#x2F;***.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p><strong>3、</strong>将本地文件同步到github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>此时，我们的博客已经搭建起来，并发布到Github上了，这时可以登陆自己的Github查看代码是否已经推送到对应Repository。最后到github的settings的GitHub Pages中查看，可以在那里看到一个网址，点击即可访问查看。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/p/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>__builtin_系列函数</title>
    <url>/p/7e0b4172.html</url>
    <content><![CDATA[<p><strong>__builtin_ffs (unsigned int x)</strong><br>返回x的最后一位1的是从后向前第几位，比如8（1000）返回4。</p>
<span id="more"></span>
<p><strong>__builtin_clz (unsigned int x)</strong><br>返回前导的0的个数。<br><strong>__builtin_ctz (unsigned int x)</strong><br>返回后面的0个个数，和__builtin_clz相对。<br><strong>__builtin_popcount (unsigned int x)</strong><br>返回二进制表示中1的个数。<br><strong>__builtin_parity (unsigned int x)</strong><br>返回x的奇偶校验位，也就是x的1的个数模2的结果。</p>
<p>这些函数都有相应的usigned long和usigned long long版本，只需要在函数名后面加上l或ll就可以了，比如 __builtin_clzll。</p>
<p>版权声明：本文为CSDN博主「Yuer-」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/yuer158462008/article/details/46383635">https://blog.csdn.net/yuer158462008/article/details/46383635</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++类型转换</title>
    <url>/p/c07d3922.html</url>
    <content><![CDATA[<h2 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h2><p>形式： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cast-name&lt;type&gt;(expression)</span><br></pre></td></tr></table></figure>
<p>type为转换的目标类型，expression为要转换的值。如果type为引用类型，则结果为左值。<br>cast-name有四种类型。static_cast，dynamic_cast，const_cast，reinterpret_cast。</p>
<span id="more"></span>

<h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>任何具有明确定义的类型转换，只要不包含底层const，都可以使用static_cast。<br>static_cast 可以被用于强制隐形转换（例如，non-const对象转换为const对象，int转型为double，等等），它还可以用于很多这样的转换的反向转换 （例如，void*指针转型为有类型指针，基类指针转型为派生类指针），但是它不能将一个const对象转型为non-const对象（只有 const_cast能做到），它最接近于C-style的转换。应用到类的指针上，意思是说它允许子类类型的指针转换为父类类型的指针（这是一个有效的隐式转换），同时，也能够执行相反动作：转换父类为它的子类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">double slope &#x3D; static_cast&lt;double&gt;(j) &#x2F; i;</span><br></pre></td></tr></table></figure>
<h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const _cast"></a>const _cast</h3><p>const_cast 只能改变运算对象的底层const。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const char *pc;</span><br><span class="line">char *p &#x3D; const_cast&lt;char *&gt;(pc);</span><br></pre></td></tr></table></figure>
<p>对于将常量转换为非常量的行为称为”cast away the const“（去掉const性质）。一旦我们去掉某个对象的const性质，编译器就不在阻止我们对该对象进行写操作。<br>只有const_cast能改变表达式的常量属性，使用其它形式的命名强制类型转换改变表达式的常量属性都将引发编译器错误。同样的，也不能用const_cast改变表达式的类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const char * cp;</span><br><span class="line">char *q &#x3D; static_cast&lt;char *&gt;(cp); &#x2F;&#x2F;错误，static_cast不能去掉常量属性</span><br><span class="line">static_cast&lt;string&gt;(cp); &#x2F;&#x2F;正确，字符串常量转换为string类型</span><br><span class="line">const_cast&lt;string&gt;(cp);  &#x2F;&#x2F;错误，const_cast只改变常量属性</span><br></pre></td></tr></table></figure>
<p>const_cast常用于有函数重载的上下文中。</p>
<h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>reinterpret_cast 通常为运算对象的位模式提供较低层次上的重新解释。reinterpret_cast 是特意用于底层的强制转型，导致实现依赖（就是说，不可移植）的结果，例如，将一个指针转型为一个整数。这样的强制类型在底层代码以外应该极为罕见。操作 结果只是简单的从一个指针到别的指针的值得二进制拷贝。在类型之间指向的内容不做任何类型的检查和转换。</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>系统虚拟化读书笔记（一）</title>
    <url>/p/27d3c010.html</url>
    <content><![CDATA[<p>虚拟化就是由位于下层的软件模块，通过向上一层软件模块提供一个与它原先所期待的运行环境完全一致的接口的方法，抽象出一个虚拟的软件或硬件接口，使得上层软件可以直接运行在虚拟的环境上。</p>
<span id="more"></span>

<p>在虚拟化中，物理资源通常有一个定语称为宿主（Host），而虚拟出来的资源通常有一个定语称为客户（Guest）。根据资源的不同，这两个名词的后面可以接不同的名词。</p>
<p>系统虚拟化是指将一台物理计算机虚拟化为一台或多台虚拟计算机系统。每个虚拟计算机系统都拥有自己的虚拟硬件，来提供一个独立的虚拟机执行环境。通过虚拟化层的模拟，虚拟机中的操作系统认为自己仍然独占一个系统运行。每个虚拟机中的操作系统可以完全不同，并且执行环境是完全独立的。这个虚拟化层称为虚拟机监管器（Virtual Machine Monitor，VMM）。</p>
<img src="/p/27d3c010/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96.PNG" class title="图1 系统虚拟化">

<p>本质上说，虚拟计算机系统和物理计算机系统可以是两个不同的ISA。但是，不同的ISA会使得虚拟机的每一条指令都需要在物理机上模拟执行，从而造成性能上的极大下降。相同的体系结构的系统虚拟化通常会有比较好的性能，VMM实现起来也比较简单。虚拟机的大部分指令可以在处理器上直接运行，只有那些需要虚拟化的指令才会由VMM进行处理。</p>
<p>1974年，Popek和Goldberg定义了虚拟机可以看作是物理机的一种高效隔离的复制。上面的定义蕴含了三层含义：同质，高效和资源受控，这也是虚拟机所具有的三个典型特征。同质是指虚拟机的运行环境和物理机的环境在本质上需要是相同的，但在表现上能够有一些差距。例如，虚拟机所看到的处理器个数可以和物理机上实际的处理器个数不同，处理器主频和物理机不同，但是物理机上和虚拟机上的处理器必须是同一种基本类型的。高效是指虚拟机中运行的软件需要有接近在物理机上直接运行的性能。软件在虚拟机运行时，大多数指令需要直接在硬件上执行，只有少数指令需要经过VMM处理或模拟。资源受控是指VMM需要对系统的资源有完全控制能力和管理权限，包括资源的分配，监控和回收。</p>
<p>完全虚拟化（Full Virtualization）</p>
<p>半虚拟化（Partial-virtualization）</p>
<p>虚拟化漏洞（Virtualization Hole）</p>
<p>二进制代码翻译（Binary Translation）</p>
<p>类虚拟化技术（Para-Virtualization）</p>
<p>系统虚拟化好处：</p>
<img src="/p/27d3c010/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96%E4%BC%98%E7%82%B9.PNG" class title="图2 系统虚拟化优点">

]]></content>
      <tags>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>Dash: Scalable Hashing on Persistent Memory</title>
    <url>/p/6ab0c77.html</url>
    <content><![CDATA[<h2 id="dash-bucket结构"><a href="#dash-bucket结构" class="headerlink" title="dash bucket结构"></a>dash bucket结构</h2><p>Dash的总体结构如图1所示。从图中可以看出，该结构和CCEH同样采取了可拓展的哈希结构，并且同样有三个层次，一个是Directory层，一个是Segment层，一个是Bucket层。不同的是，每个Segment层除了正常的Bucket外，还有Stash buckets用来存储冲突的键值对。根据论文，一个Segment层的Stash buckets数量为2或4。另外，在Directory层有三个主要变量，Lock是锁，Version用来做版本控制，Clean用来判断系统的关闭是否是干净的。</p>
<span id="more"></span>

<img src="/p/6ab0c77/dash_architecture.PNG" class title="图1 Dash总体结构">

<p>图2是bucket层的具体结构。从图中可知，一个bucket就只存储14个键值对，一个键值对16个字节。另外，每个bucket有32字节的元数据，其中包括4字节的版本锁，根据代码可知，最高位是互斥锁，后面31位作为版本号进行版本控制；接着的counter是用来计算bucket中有多少个键值对；membership是一个位图，用来显示那些不是直接索引到该bucket中的键值对；Alloc.bitmap也是一个位图，用来显示该bucket中的全部键值对；接下来是18个fingeprint，每个fingerprint是1字节，所谓的fingerprint是哈希值的后8位，通过fingerprint可以大量减少NVM读的次数，有一点值得注意，一个bucket只有14个键值对，但是却有18个fingerprint，这是stash bucket中在本bucket溢出的键值对的fingerprint；overflow fingerprint bitmap是4位，判断溢出的对应的fingerprint是否被占用；overflow bit用来判断这个bucket是否有溢出的键值对，stash bucket index用来判断fingerprint对应的键值对在哪个bucket；overflow membership用来判断溢出的键值对是否直接索引到该bucket ；overflow count表示直接对应该bucket的键值对却无法插入到该bucket和下一个bucket的键值对数量，注意overcount不包括那些在bucket或下一个bucket有存储fingerprint的键值对。</p>
<img src="/p/6ab0c77/dash_bucket.PNG" class title="图2 bucket结构">

<h2 id="dash实现细节"><a href="#dash实现细节" class="headerlink" title="dash实现细节"></a>dash实现细节</h2><p>每个Segment有64个bucket，因此可以根据6位来确定bucket的位置。哈希值最后8位是作为fingerprint，最后9到14位来确定bucket位置。</p>
<h3 id="dash-insert"><a href="#dash-insert" class="headerlink" title="dash insert"></a>dash insert</h3><p>最上层的伪代码如图3所示。首先，是判断键值是否已经存在，如果存在，则直接返回。其次，如果target_bucket和probing_bucket都未满，为了让两者负载均衡，会插入到两者数量较少的一边；如果两者都满了，则会判断target和probing target中是否有可以移动的键值对，即在target中属于前一个bucket的键值对，且前一个bucket有空余的位置，则将其中一个插入到前一个bucket，或者probe target中属于probe target的键值对，且后一个bucket有空余的位置，则将其中一个插入到前一个bucket。最后，如果没有空闲的位置，则插入到stash中，并设置target的overflow为1，如果stash中也没有空余的位置，则分裂。接下来，对其中的有些细节进行补充。</p>
<img src="/p/6ab0c77/insert_top.PNG" class title="图3 dash insert伪代码">

<h3 id="key-exists"><a href="#key-exists" class="headerlink" title="key exists"></a>key exists</h3><p>根据源代码，首先是在target_bucket和probing_bucket中寻找是否存在相同的键值，这个部分可以利用fingerprint大量减少读的次数，并且，fingerprint可以使用SSE加速，另外，在源代码中，对14位每位进行判断的时候，使用了循环展开的方法降低开销；之后，判断是否需要去stash中查找，判断是否要在stash中查找要依次查看overflow bit是否为0，overcount是否为0，overflowBit与overflow fingerprint与overflow membership的关系，不满足则要对stash进行搜索。</p>
<h3 id="bucket-insert"><a href="#bucket-insert" class="headerlink" title="bucket insert"></a>bucket insert</h3><p>首先找到空闲的键值对，这可以利用bitmap进行位运算得到。接着插入，并设置标志位。由于clflush一次刷新一个cacheline，一个cacheline为64字节，所以所有的元数据都可以在一次刷新中刷入。</p>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>Split过程基本与CCEH相似。重点说明几点不同之处：第一，分裂的时候，dash要将所有bucket的锁都上锁，第二，dash在分裂时候的正确性由libpmemobj的事务保障，这保证分裂出去的Segment在程序崩溃之后能够回收成功。</p>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>search伪代码如图4所示。从伪代码中，可以看出，在搜索的过程中并没有使用锁。dash采用乐观锁的方式大大提高并行环境下的搜索效率。在搜索之前，判断bucket是否上锁；在搜索完成后，dash通过检查bucket的版本是否与之前读取的一致来判断search的过程中是否有进程对bucket进行修改，如果有，则会重新读取。另外，由于fingerprint的存在，大大减少了读的次数。</p>
<img src="/p/6ab0c77/dash_search.PNG" class title="图4 dash search伪代码">

<h2 id="dash-与-cceh评测"><a href="#dash-与-cceh评测" class="headerlink" title="dash 与 cceh评测"></a>dash 与 cceh评测</h2><h3 id="cceh改写"><a href="#cceh改写" class="headerlink" title="cceh改写"></a>cceh改写</h3><p>dash的作者对cceh进行了改写，首先在insert上，作者增加了判断新增的键值对是否存在的判断，由于cceh没有此方面的实现，所以作者相当于搜索了一次；另外，在split的过程中，作者将cceh的分裂用libpmemobj的事务进行处理。</p>
<h3 id="单线程比较"><a href="#单线程比较" class="headerlink" title="单线程比较"></a>单线程比较</h3><p>对于key大小大于8字节的键值对来说，由于每次读取键值都需要先读指针，再读key，这就体现了fingerprint的优越性，fingerprint大大减少了读的次数。</p>
<img src="/p/6ab0c77/re1.PNG" class title="图5 单线程">

<h3 id="多线程比较"><a href="#多线程比较" class="headerlink" title="多线程比较"></a>多线程比较</h3><img src="/p/6ab0c77/re2.PNG" class title="图6 多线程">

<h3 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h3><img src="/p/6ab0c77/re3.PNG" class title="图7 负载因子">

<h2 id="dash代码运行环境要求"><a href="#dash代码运行环境要求" class="headerlink" title="dash代码运行环境要求"></a>dash代码运行环境要求</h2><p>源代码地址 <a href="https://github.com/baotonglu/dash.git">https://github.com/baotonglu/dash.git</a><br>linux 内核版本4.17之后<br>glibc 版本2.29之后</p>
]]></content>
      <tags>
        <tag>NVM论文研读</tag>
      </tags>
  </entry>
</search>
